package main

const metricsTemplate = `// Code generated by go generate; DO NOT EDIT.
package {{.PackageName}}

import (
    "github.com/prometheus/client_golang/prometheus"
)

func init() {
    // Automatically register metrics with Prometheus's default registry.
    {{range .Metrics}}
        prometheus.MustRegister({{snakeToCamel .Name}})
    {{- end}}
}

{{range $label, $_ := .UniqueLabels}}
    type {{snakeToCamel $label}} string
{{- end}}

{{range .Metrics}}
    {{- if eq .Type "counter"}}
        var {{snakeToCamel .Name}} = prometheus.NewCounterVec(
            prometheus.CounterOpts{
                Name: "{{.Name}}",
                Help: "{{.Help}}",
            },
            []string{ {{- range .Labels}}"{{.}}",{{- end}} },
        )

        func Inc{{snakeToCamel .Name}}({{range .Labels}}{{snakeToCamel .}} {{snakeToCamel .}},{{- end}}) {
            {{snakeToCamel .Name}}.With(prometheus.Labels{
                {{- range .Labels}}
                "{{.}}": string({{snakeToCamel .}}),
                {{- end}}
            }).Inc()
        }

    {{- else if eq .Type "gauge"}}
        var {{snakeToCamel .Name}} = prometheus.NewGaugeVec(
            prometheus.GaugeOpts{
                Name: "{{.Name}}",
                Help: "{{.Help}}",
            },
            []string{ {{- range .Labels}}"{{.}}",{{- end}} },
        )

        func Set{{snakeToCamel .Name}}({{range .Labels}}{{snakeToCamel .}} {{snakeToCamel .}},{{- end}} value float64) {
            {{snakeToCamel .Name}}.With(prometheus.Labels{
                {{- range .Labels}}
                "{{.}}": string({{snakeToCamel .}}),
                {{- end}}
            }).Set(value)
        }

    {{- else if eq .Type "histogram"}}
        var {{snakeToCamel .Name}} = prometheus.NewHistogramVec(
            prometheus.HistogramOpts{
                Name: "{{.Name}}",
                Help: "{{.Help}}",
                Buckets: []float64{ {{- range .Buckets}}{{.}},{{- end}} },
            },
            []string{ {{- range .Labels}}"{{.}}",{{- end}} },
        )

        func Observe{{snakeToCamel .Name}}({{range .Labels}}{{snakeToCamel .}} {{snakeToCamel .}},{{- end}} value float64) {
            {{snakeToCamel .Name}}.With(prometheus.Labels{
                {{- range .Labels}}
                "{{.}}": string({{snakeToCamel .}}),
                {{- end}}
            }).Observe(value)
        }
    {{- end}}
{{- end}}
`
