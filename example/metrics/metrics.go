// Code generated by go generate; DO NOT EDIT.
package metrics

import (
	"github.com/prometheus/client_golang/prometheus"
)

func init() {
	// Automatically register metrics with Prometheus's default registry.

	prometheus.MustRegister(SystemUptimeSeconds)
	prometheus.MustRegister(HttpRequestsTotal)
	prometheus.MustRegister(HttpRequestDurationSeconds)
	prometheus.MustRegister(ActiveSessions)
}

type Method string
type Status string
type UserType string

var SystemUptimeSeconds = prometheus.NewGaugeVec(
	prometheus.GaugeOpts{
		Name: "system_uptime_seconds",
		Help: "The total system uptime in seconds.",
	},
	[]string{},
)

func SetSystemUptimeSeconds(value float64) {
	SystemUptimeSeconds.With(prometheus.Labels{}).Set(value)
}

var HttpRequestsTotal = prometheus.NewCounterVec(
	prometheus.CounterOpts{
		Name: "http_requests_total",
		Help: "The total number of HTTP requests.",
	},
	[]string{"method", "status"},
)

func IncHttpRequestsTotal(Method Method, Status Status) {
	HttpRequestsTotal.With(prometheus.Labels{
		"method": string(Method),
		"status": string(Status),
	}).Inc()
}

var HttpRequestDurationSeconds = prometheus.NewHistogramVec(
	prometheus.HistogramOpts{
		Name:    "http_request_duration_seconds",
		Help:    "The duration of HTTP requests in seconds.",
		Buckets: []float64{0.001, 0.01, 0.1, 0.5, 1, 5, 10},
	},
	[]string{"method", "status"},
)

func ObserveHttpRequestDurationSeconds(Method Method, Status Status, value float64) {
	HttpRequestDurationSeconds.With(prometheus.Labels{
		"method": string(Method),
		"status": string(Status),
	}).Observe(value)
}

var ActiveSessions = prometheus.NewGaugeVec(
	prometheus.GaugeOpts{
		Name: "active_sessions",
		Help: "The current number of active sessions.",
	},
	[]string{"user_type"},
)

func SetActiveSessions(UserType UserType, value float64) {
	ActiveSessions.With(prometheus.Labels{
		"user_type": string(UserType),
	}).Set(value)
}
